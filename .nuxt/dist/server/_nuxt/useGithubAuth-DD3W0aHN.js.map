{"version":3,"file":"useGithubAuth-DD3W0aHN.js","sources":["../../../../composables/useGithubAuth.ts"],"sourcesContent":["// composables/useGithubAuth.ts\nimport { ref } from \"vue\";\n\n// Define interface for the GitHub API response\ninterface GitHubTokenResponse {\n  access_token: string;\n  token_type: string;\n  scope: string;\n}\n\n// Define interface for API error response\ninterface ApiError {\n  message: string;\n  statusCode: number;\n}\n\nexport const useGithubAuth = () => {\n  const isAuthenticated = ref(false);\n  const accessToken = ref<string | null>(null);\n  const error = ref<string | null>(null);\n  const loading = ref(false);\n\n  const config = useRuntimeConfig();\n\n  const initialize = () => {\n    if (!process.client) return;\n\n    const token = localStorage.getItem(\"github_token\");\n    if (token) {\n      accessToken.value = token;\n      isAuthenticated.value = true;\n    }\n  };\n\n  const initiateLogin = () => {\n    if (!process.client) return;\n\n    try {\n      const clientId = config.public.githubClientId;\n      console.log(\"Client ID available:\", !!clientId);\n\n      if (!clientId) {\n        throw new Error(\"GitHub client ID is not configured\");\n      }\n\n      // Generate and store state\n      const state = Math.random().toString(36).substring(7);\n      localStorage.setItem(\"github_oauth_state\", state);\n\n      // Always use port 3000 for local development\n      const baseUrl =\n        process.env.NODE_ENV === \"production\"\n          ? config.public.siteUrl\n          : \"http://localhost:3000\";\n      console.log(\"Base URL:\", baseUrl);\n\n      // Construct callback URL\n      const callbackUrl = new URL(\"/auth/callback\", baseUrl).toString();\n      console.log(\"Callback URL:\", callbackUrl);\n\n      // Construct GitHub authorization URL\n      const githubUrl = new URL(\"https://github.com/login/oauth/authorize\");\n      githubUrl.searchParams.set(\"client_id\", clientId);\n      githubUrl.searchParams.set(\"redirect_uri\", callbackUrl);\n      githubUrl.searchParams.set(\"scope\", \"repo user\");\n      githubUrl.searchParams.set(\"state\", state);\n      githubUrl.searchParams.set(\"response_type\", \"code\");\n\n      console.log(\"Redirecting to GitHub:\", githubUrl.toString());\n\n      // Redirect to GitHub\n      window.location.href = githubUrl.toString();\n    } catch (err) {\n      console.error(\"Error initiating GitHub login:\", err);\n      error.value =\n        err instanceof Error ? err.message : \"Failed to initiate GitHub login\";\n    }\n  };\n\n  const handleCallback = async (code: string, state: string) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      // Verify state\n      const savedState = localStorage.getItem(\"github_oauth_state\");\n      if (!savedState || savedState !== state) {\n        throw new Error(\"Invalid state parameter\");\n      }\n\n      // Exchange code for token\n      const response = await fetch(\"/api/auth/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ code }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\n          errorData.message || \"Failed to exchange code for token\"\n        );\n      }\n\n      const data = await response.json();\n      localStorage.setItem(\"github_access_token\", data.access_token);\n      accessToken.value = data.access_token;\n      isAuthenticated.value = true;\n\n      // Clear OAuth state\n      localStorage.removeItem(\"github_oauth_state\");\n    } catch (err) {\n      console.error(\"Error handling callback:\", err);\n      error.value =\n        err instanceof Error ? err.message : \"Authentication failed\";\n      isAuthenticated.value = false;\n      accessToken.value = null;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const logout = () => {\n    if (!process.client) return;\n\n    localStorage.removeItem(\"github_access_token\");\n    accessToken.value = null;\n    isAuthenticated.value = false;\n  };\n\n  // Initialize on mount if in client\n  if (process.client) {\n    initialize();\n  }\n\n  return {\n    isAuthenticated,\n    accessToken,\n    error,\n    loading,\n    initiateLogin,\n    handleCallback,\n    logout,\n  };\n};\n"],"names":[],"mappings":";;AAgBO,MAAM,gBAAgB,MAAM;AAC3B,QAAA,kBAAkB,IAAI,KAAK;AAC3B,QAAA,cAAc,IAAmB,IAAI;AACrC,QAAA,QAAQ,IAAmB,IAAI;AAC/B,QAAA,UAAU,IAAI,KAAK;AAczB,QAAM,gBAAgB,MAAM;AACL;AAAA,EA0CvB;AAEM,QAAA,iBAAiB,OAAO,MAAc,UAAkB;AACxD,QAAA;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAGR,YAAA,aAAa,aAAa,QAAQ,oBAAoB;AACxD,UAAA,CAAC,cAAc,eAAe,OAAO;AACjC,cAAA,IAAI,MAAM,yBAAyB;AAAA,MAAA;AAIrC,YAAA,WAAW,MAAM,MAAM,mBAAmB;AAAA,QAC9C,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,KAAM,CAAA;AAAA,MAAA,CAC9B;AAEG,UAAA,CAAC,SAAS,IAAI;AACV,cAAA,YAAY,MAAM,SAAS,KAAK;AACtC,cAAM,IAAI;AAAA,UACR,UAAU,WAAW;AAAA,QACvB;AAAA,MAAA;AAGI,YAAA,OAAO,MAAM,SAAS,KAAK;AACpB,mBAAA,QAAQ,uBAAuB,KAAK,YAAY;AAC7D,kBAAY,QAAQ,KAAK;AACzB,sBAAgB,QAAQ;AAGxB,mBAAa,WAAW,oBAAoB;AAAA,aACrC,KAAK;AACJ,cAAA,MAAM,4BAA4B,GAAG;AAC7C,YAAM,QACJ,eAAe,QAAQ,IAAI,UAAU;AACvC,sBAAgB,QAAQ;AACxB,kBAAY,QAAQ;AAAA,IAAA,UACpB;AACA,cAAQ,QAAQ;AAAA,IAAA;AAAA,EAEpB;AAEA,QAAM,SAAS,MAAM;AACE;AAAA,EAKvB;AAOO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;"}