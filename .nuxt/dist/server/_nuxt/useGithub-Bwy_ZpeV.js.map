{"version":3,"file":"useGithub-Bwy_ZpeV.js","sources":["../../../../composables/useGithub.ts"],"sourcesContent":["// useGithub.ts\nimport { Octokit } from \"@octokit/rest\";\nimport { useRuntimeConfig, navigateTo, useState } from \"#app\";\nimport { ref, onMounted, computed } from \"vue\";\n\n// Define interfaces for all GitHub-related data structures\nexport interface GitHubUser {\n  login: string;\n  avatar_url: string;\n  name: string;\n  id: number;\n}\n\nexport interface PullRequest {\n  number: number;\n  title: string;\n  user: GitHubUser;\n  html_url: string;\n  mergeable: boolean;\n  mergeable_state: string;\n  files?: Array<{\n    filename: string;\n    patch?: string;\n  }>;\n  base: {\n    ref: string;\n  };\n  head: {\n    ref: string;\n  };\n}\n\nexport interface Commit {\n  sha: string;\n  commit: {\n    message: string;\n    author: {\n      name: string;\n      date: string;\n    };\n  };\n  author?: {\n    avatar_url: string;\n  };\n}\n\n// Main composable function for GitHub functionality\nexport const useGithub = () => {\n  // Initialize runtime configuration and state\n  const config = useRuntimeConfig();\n  const user = ref<GitHubUser | null>(null);\n  const loading = ref(false);\n  // Make currentBranch persistent\n  const currentBranch = useState<string>(\"github-current-branch\", () => \"main\");\n  const branches = ref<string[]>([]);\n\n  // Initialize Octokit with stored token if available\n  const octokit = new Octokit({\n    auth: process.client ? localStorage.getItem(\"github_token\") : undefined,\n  });\n\n  // Handle GitHub OAuth login\n  const initiateLogin = () => {\n    if (!process.client) return;\n\n    const params = new URLSearchParams({\n      client_id: config.public.githubClientId,\n      redirect_uri: `${config.public.siteUrl}/auth/callback`,\n      scope: \"user repo\",\n      response_type: \"code\",\n      allow_signup: \"true\",\n    });\n\n    window.location.href = `https://github.com/login/oauth/authorize?${params}`;\n  };\n\n  // Handle user logout\n  const handleLogout = () => {\n    if (!process.client) return;\n    localStorage.removeItem(\"github_token\");\n    user.value = null;\n  };\n\n  // Fetch authenticated user data\n  const fetchUserData = async (): Promise<GitHubUser | null> => {\n    if (!process.client) return null;\n\n    const token = localStorage.getItem(\"github_token\");\n    if (!token) return null;\n\n    loading.value = true;\n    try {\n      const { data } = await octokit.rest.users.getAuthenticated();\n      user.value = data as GitHubUser;\n      return data as GitHubUser;\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      return null;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // Check if user is logged in\n  const isLoggedIn = computed(() => {\n    if (!process.client) return false;\n    return !!localStorage.getItem(\"github_token\");\n  });\n\n  // Create a fork of a repository\n  const createRepositoryFork = async (owner: string, repo: string) => {\n    if (!isLoggedIn.value) return null;\n\n    try {\n      const { data } = await octokit.rest.repos.createFork({\n        owner,\n        repo,\n        name: repo,\n      });\n      return data;\n    } catch (error) {\n      console.error(\"Error creating fork:\", error);\n      return null;\n    }\n  };\n\n  // Create a new branch\n  const createNewBranch = async (\n    owner: string,\n    repo: string,\n    base: string,\n    newBranch: string\n  ) => {\n    if (!isLoggedIn.value) return null;\n\n    try {\n      const { data: ref } = await octokit.rest.git.getRef({\n        owner,\n        repo,\n        ref: `heads/${base}`,\n      });\n\n      await octokit.rest.git.createRef({\n        owner,\n        repo,\n        ref: `refs/heads/${newBranch}`,\n        sha: ref.object.sha,\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"Error creating branch:\", error);\n      return null;\n    }\n  };\n\n  // Create a pull request\n  const createNewPullRequest = async (\n    owner: string,\n    repo: string,\n    base: string,\n    head: string,\n    title: string,\n    body: string\n  ) => {\n    if (!isLoggedIn.value) return null;\n\n    try {\n      const { data } = await octokit.rest.pulls.create({\n        owner,\n        repo,\n        base,\n        head,\n        title,\n        body,\n      });\n      return data;\n    } catch (error) {\n      console.error(\"Error creating pull request:\", error);\n      return null;\n    }\n  };\n\n  const getRawFileContent = async (\n    owner: string,\n    repo: string,\n    path: string,\n    branch?: string\n  ): Promise<string> => {\n    const targetBranch = branch || currentBranch.value;\n    const timestamp = Date.now(); // Add cache busting\n    const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${targetBranch}/${path}?t=${timestamp}`;\n    console.log(\"Fetching from raw URL:\", rawUrl);\n\n    const response = await fetch(rawUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch content: ${response.statusText}`);\n    }\n\n    return response.text();\n  };\n\n  // Save or update a file in the repository\n  const saveFileContent = async (\n    owner: string,\n    repo: string,\n    path: string,\n    content: string,\n    message: string,\n    branch?: string\n  ) => {\n    if (!isLoggedIn.value) {\n      throw new Error(\"Authentication required to save content\");\n    }\n\n    // Always use provided branch or current branch\n    const targetBranch = branch || currentBranch.value;\n    console.log(\n      `Saving to branch: ${targetBranch}, currentBranch is: ${currentBranch.value}`\n    );\n\n    try {\n      // First verify branch exists\n      await octokit.rest.repos.getBranch({\n        owner,\n        repo,\n        branch: targetBranch,\n      });\n\n      // Get current file if it exists\n      let sha: string | undefined;\n      try {\n        const { data } = await octokit.rest.repos.getContent({\n          owner,\n          repo,\n          path,\n          ref: targetBranch,\n        });\n        if (\"sha\" in data) {\n          sha = data.sha;\n          console.log(\n            `Found existing file in branch ${targetBranch}, sha: ${sha}`\n          );\n        }\n      } catch (error) {\n        console.log(\n          `No existing file found in branch ${targetBranch}, creating new file`\n        );\n      }\n\n      // Create the commit\n      const result = await octokit.rest.repos.createOrUpdateFileContents({\n        owner,\n        repo,\n        path,\n        message: `${message} [branch: ${targetBranch}]`,\n        content: btoa(unescape(encodeURIComponent(content))),\n        branch: targetBranch,\n        sha,\n      });\n\n      console.log(`Successfully saved to branch: ${targetBranch}`);\n      return result.data;\n    } catch (error) {\n      console.error(`Error saving to branch ${targetBranch}:`, error);\n      throw error;\n    }\n  };\n\n  const getRawContent = async (\n    owner: string,\n    repo: string,\n    path: string,\n    branch?: string\n  ) => {\n    try {\n      const targetBranch = branch || currentBranch.value;\n\n      // Only add a timestamp parameter to bypass cache\n      const url = `https://raw.githubusercontent.com/${owner}/${repo}/${targetBranch}/${path}?t=${Date.now()}`;\n\n      console.log(\"Fetching content from URL:\", url);\n\n      const response = await fetch(url);\n\n      console.log(\"Response status:\", response.status);\n      console.log(\n        \"Response headers:\",\n        Object.fromEntries(response.headers.entries())\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.log(\"File not found, returning empty content\");\n          return \"\";\n        }\n        throw new Error(`Failed to fetch content: ${response.statusText}`);\n      }\n\n      const content = await response.text();\n\n      // Log content details\n      console.log(\"Content fetched:\", {\n        length: content.length,\n        timestamp: new Date().toISOString(),\n      });\n\n      return content;\n    } catch (error) {\n      console.error(\"Error fetching content:\", error);\n      throw error;\n    }\n  };\n\n  // Helper function to check if error is a \"not found\" error\n  const isNotFoundError = (error: any): boolean => {\n    return error?.response?.status === 404;\n  };\n\n  // Get file content from repository\n  const fetchFileContent = async (\n    owner: string,\n    repo: string,\n    path: string,\n    ref?: string\n  ) => {\n    if (!isLoggedIn.value) return null;\n\n    const targetRef = ref || currentBranch.value;\n    try {\n      const { data } = await octokit.request(\n        \"GET /repos/{owner}/{repo}/contents/{path}\",\n        {\n          owner,\n          repo,\n          path,\n          ref: targetRef,\n          headers: {\n            Accept: \"application/vnd.github.raw+json\",\n            \"X-GitHub-Api-Version\": \"2022-11-28\",\n          },\n        }\n      );\n\n      return data;\n    } catch (error) {\n      console.error(\"Error getting file content:\", error);\n      return null;\n    }\n  };\n\n  // Get list of pull requests\n  const fetchPullRequests = async () => {\n    if (!isLoggedIn.value) return [];\n\n    try {\n      const { data } = await octokit.rest.pulls.list({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        state: \"open\",\n      });\n\n      const detailedPRs = await Promise.all(\n        data.map(async (pr) => {\n          const { data: prDetails } = await octokit.rest.pulls.get({\n            owner: \"tiresomefanatic\",\n            repo: \"heroechotemp\",\n            pull_number: pr.number,\n          });\n          return prDetails;\n        })\n      );\n\n      return detailedPRs as PullRequest[];\n    } catch (error) {\n      console.error(\"Error fetching pull requests:\", error);\n      return [];\n    }\n  };\n\n  // Get list of commits\n  const fetchCommits = async () => {\n    if (!isLoggedIn.value) return [];\n\n    try {\n      const { data } = await octokit.rest.repos.listCommits({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        per_page: 10,\n      });\n\n      return data as Commit[];\n    } catch (error) {\n      console.error(\"Error fetching commits:\", error);\n      return [];\n    }\n  };\n\n  // Resolve merge conflicts\n  const resolveConflictInFile = async (\n    prNumber: number,\n    filePath: string,\n    resolution: \"ours\" | \"theirs\"\n  ) => {\n    if (!isLoggedIn.value) return null;\n\n    try {\n      const { data: pr } = await octokit.rest.pulls.get({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        pull_number: prNumber,\n      });\n\n      const resolutionBranch = `conflict-resolution-${prNumber}-${Date.now()}`;\n\n      await createNewBranch(\n        \"tiresomefanatic\",\n        \"heroechotemp\",\n        pr.base.ref,\n        resolutionBranch\n      );\n\n      const content =\n        resolution === \"ours\"\n          ? await fetchFileContent(\n              \"tiresomefanatic\",\n              \"heroechotemp\",\n              filePath,\n              pr.base.ref\n            )\n          : await fetchFileContent(\n              \"tiresomefanatic\",\n              \"heroechotemp\",\n              filePath,\n              pr.head.ref\n            );\n\n      if (!content) {\n        throw new Error(\"Could not get file content\");\n      }\n\n      await saveFileContent(\n        \"tiresomefanatic\",\n        \"heroechotemp\",\n        filePath,\n        content,\n        `Resolve conflict in ${filePath} using ${resolution} changes`,\n        resolutionBranch\n      );\n\n      return true;\n    } catch (error) {\n      console.error(\"Error resolving conflict:\", error);\n      return null;\n    }\n  };\n\n  // Get all branches\n  const fetchBranches = async () => {\n    if (!isLoggedIn.value) return [];\n\n    try {\n      console.log(\"Fetching branches...\");\n      const { data } = await octokit.rest.repos.listBranches({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n      });\n\n      console.log(\n        \"Fetched branches:\",\n        data.map((b) => b.name)\n      );\n      branches.value = data.map((branch) => branch.name);\n\n      // If current branch is not in the list, switch to main\n      if (!branches.value.includes(currentBranch.value)) {\n        console.log(\n          `Current branch ${currentBranch.value} not found, switching to main`\n        );\n        currentBranch.value = \"main\";\n      }\n\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching branches:\", error);\n      return [];\n    }\n  };\n\n  // Create a new branch\n  const createBranch = async (branchName: string) => {\n    if (!isLoggedIn.value) return null;\n\n    try {\n      console.log(\n        `Creating new branch: ${branchName} from ${currentBranch.value}`\n      );\n\n      // Get current branch's latest commit\n      const { data: currentRef } = await octokit.rest.git.getRef({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        ref: `heads/${currentBranch.value}`,\n      });\n\n      // Create new branch from current branch\n      await octokit.rest.git.createRef({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        ref: `refs/heads/${branchName}`,\n        sha: currentRef.object.sha,\n      });\n\n      console.log(`Created branch ${branchName}, fetching updated branch list`);\n      await fetchBranches();\n\n      // Switch to new branch\n      console.log(`Switching to new branch: ${branchName}`);\n      currentBranch.value = branchName;\n\n      return true;\n    } catch (error) {\n      console.error(\"Error creating branch:\", error);\n      return null;\n    }\n  };\n\n  // Switch branch\n  const switchBranch = async (branchName: string) => {\n    if (!isLoggedIn.value) return false;\n\n    try {\n      console.log(`Switching to branch: ${branchName}`);\n\n      // Verify branch exists\n      const { data } = await octokit.rest.repos.getBranch({\n        owner: \"tiresomefanatic\",\n        repo: \"heroechotemp\",\n        branch: branchName,\n      });\n\n      if (data) {\n        currentBranch.value = branchName;\n        console.log(\n          `Successfully switched to branch: ${branchName}, currentBranch is now: ${currentBranch.value}`\n        );\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(`Error switching to branch ${branchName}:`, error);\n      return false;\n    }\n  };\n\n  // Return all functions with explicit names to avoid TypeScript errors\n  return {\n    user,\n    loading,\n    currentBranch,\n    branches,\n    login: initiateLogin,\n    logout: handleLogout,\n    isLoggedIn,\n    getRawContent,\n    saveFileContent,\n    getPullRequests: fetchPullRequests,\n    getCommits: fetchCommits,\n    resolveConflict: resolveConflictInFile,\n    fetchBranches,\n    createBranch,\n    switchBranch,\n    createNewPullRequest,\n  };\n};\n"],"names":["ref"],"mappings":"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"}